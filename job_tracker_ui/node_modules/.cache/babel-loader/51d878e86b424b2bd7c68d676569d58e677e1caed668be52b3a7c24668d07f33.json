{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\wangj\\\\Desktop\\\\job_tracker_homepage_update\\\\job_tracker_ui\\\\src\\\\pages\\\\LoginPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const LoginPage = () => {\n  _s();\n  const [email, setEmail] = useState('');\n  const [pword, setPword] = useState('');\n  const navigate = useNavigate();\n  const resetLoginForm = () => {\n    setEmail('');\n    setPword('');\n  };\n  const loginUser = async evt => {\n    evt.preventDefault();\n    const user = {\n      username: email,\n      password: pword\n    };\n    const response = await fetch('/login', {\n      method: 'POST',\n      body: JSON.stringify(user),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    if (response.status === 200) {\n      alert(\"Login successful\");\n      navigate('/jobs');\n    } else {\n      alert(\"Error encountered during login. Try again.\");\n      resetLoginForm();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      id: \"loginForm\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"userEmail\",\n        children: \"Email address\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"userEmail\",\n        type: \"email\",\n        name: \"email\",\n        placeholder: \"Email\",\n        value: email,\n        onChange: evt => setEmail(evt.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"userPassword\",\n        children: \"Password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"userPassword\",\n        type: \"password\",\n        name: \"password\",\n        placeholder: \"Password\",\n        value: pword,\n        onChange: evt => setPword(evt.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"loginSubmit\",\n        type: \"submit\",\n        onClick: loginUser,\n        children: \"Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 9\n  }, this);\n};\n_s(LoginPage, \"kLfRmdBS7fqggEBkdTmYC2hREDg=\", false, function () {\n  return [useNavigate];\n});\n_c = LoginPage;\nexport default LoginPage;\nvar _c;\n$RefreshReg$(_c, \"LoginPage\");","map":{"version":3,"names":["React","useState","useNavigate","jsxDEV","_jsxDEV","LoginPage","_s","email","setEmail","pword","setPword","navigate","resetLoginForm","loginUser","evt","preventDefault","user","username","password","response","fetch","method","body","JSON","stringify","headers","status","alert","children","id","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","type","name","placeholder","value","onChange","target","required","onClick","_c","$RefreshReg$"],"sources":["C:/Users/wangj/Desktop/job_tracker_homepage_update/job_tracker_ui/src/pages/LoginPage.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nexport const LoginPage = ( ) => {\r\n    const [email, setEmail] = useState('');\r\n    const [pword, setPword] = useState('');\r\n\r\n    const navigate = useNavigate();\r\n\r\n    const resetLoginForm = () => {\r\n        setEmail('');\r\n        setPword('');\r\n    }\r\n\r\n    const loginUser = async (evt) => {\r\n        evt.preventDefault();\r\n        const user = {username: email, password: pword};\r\n        const response = await fetch('/login', {\r\n            method: 'POST',\r\n            body: JSON.stringify(user),\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n        })\r\n        if (response.status === 200) {\r\n            alert(\"Login successful\");\r\n            navigate('/jobs');\r\n        } else {\r\n            alert(\"Error encountered during login. Try again.\");\r\n            resetLoginForm();\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <form id=\"loginForm\">\r\n                <label htmlFor=\"userEmail\">\r\n                    Email address\r\n                </label>\r\n                <input\r\n                    id=\"userEmail\"\r\n                    type=\"email\"\r\n                    name=\"email\"\r\n                    placeholder=\"Email\"\r\n                    value={email}\r\n                    onChange={evt => setEmail(evt.target.value)}\r\n                    required\r\n                />\r\n                <label htmlFor=\"userPassword\">\r\n                    Password\r\n                </label>\r\n                <input\r\n                    id=\"userPassword\"\r\n                    type=\"password\"\r\n                    name=\"password\"\r\n                    placeholder=\"Password\"\r\n                    value={pword}\r\n                    onChange={evt => setPword(evt.target.value)}\r\n                    required\r\n                />\r\n                <button\r\n                    id=\"loginSubmit\"\r\n                    type=\"submit\"\r\n                    onClick={loginUser}\r\n                >\r\n                    Login\r\n                </button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LoginPage;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}