{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\wangj\\\\Desktop\\\\job_tracker_homepage_update\\\\job_tracker_ui\\\\src\\\\pages\\\\RegisterPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const RegisterPage = () => {\n  _s();\n  const [email, setEmail] = useState('');\n  const [pword, setPword] = useState('');\n  const [pwordConfirm, setPwordConfirm] = useState('');\n  const [firstName, setFirstName] = useState('');\n  const [lastName, setLastName] = useState('');\n  const navigate = useNavigate();\n  const isPassConfirmed = (userPass, confirmPass) => {\n    return userPass === confirmPass;\n  };\n  const resetRegForm = () => {\n    setEmail('');\n    setPword('');\n    setPwordConfirm('');\n    setFirstName('');\n    setLastName('');\n  };\n  const registerUser = async evt => {\n    evt.preventDefault();\n    if (!isPassConfirmed(pword, pwordConfirm)) {\n      alert(\"Passwords don't match. Try again.\");\n      resetRegForm();\n    } else {\n      const newUser = {\n        email,\n        pword,\n        pwordConfirm,\n        firstName,\n        lastName\n      };\n      const response = await fetch('/register', {\n        method: 'POST',\n        body: JSON.stringify(newUser),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      if (response.status === 201) {\n        alert(\"Registration successful\");\n        navigate('/jobs');\n      } else if (response.status === 400) {\n        alert(\"One or more of the fields were invalid or an account with that email already exists\");\n        resetRegForm();\n      } else {\n        alert(\"Error encountered during registration. Try again.\");\n        resetRegForm();\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: registerUser,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"userFirstName\",\n        children: \"First Name *\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"userFirstName\",\n        type: \"text\",\n        name: \"lastName\",\n        placeholder: \"First name\",\n        value: firstName,\n        onChange: evt => setFirstName(evt.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"userLastName\",\n        children: \"Last Name *\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"userLastName\",\n        type: \"text\",\n        name: \"firstName\",\n        placeholder: \"Last Name\",\n        value: lastName,\n        onChange: evt => setLastName(evt.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"userEmail\",\n        children: \"Email *\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"userEmail\",\n        type: \"email\",\n        name: \"email\",\n        placeholder: \"Email\",\n        value: email,\n        onChange: evt => setEmail(evt.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"userPassword\",\n        children: [\"Password * \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 32\n        }, this), \"(Must be at least 8 characters long and contain at least 1 of the following: uppercase letter, lowercase letter, number, special character)\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"userPassword\",\n        type: \"password\",\n        name: \"password\",\n        placeholder: \"Password\",\n        value: pword,\n        onChange: evt => setPword(evt.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"passConfirm\",\n        children: \"Verify Password *\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"passConfirm\",\n        type: \"password\",\n        name: \"confirmation\",\n        placeholder: \"Retype password\",\n        value: pwordConfirm,\n        onChange: evt => setPwordConfirm(evt.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"regSubmit\",\n        type: \"submit\",\n        onClick: registerUser,\n        children: \"Register\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 9\n  }, this);\n};\n_s(RegisterPage, \"eZam3qZRPK763Ew00XAQfsqftpg=\", false, function () {\n  return [useNavigate];\n});\n_c = RegisterPage;\nexport default RegisterPage;\nvar _c;\n$RefreshReg$(_c, \"RegisterPage\");","map":{"version":3,"names":["React","useState","useNavigate","jsxDEV","_jsxDEV","RegisterPage","_s","email","setEmail","pword","setPword","pwordConfirm","setPwordConfirm","firstName","setFirstName","lastName","setLastName","navigate","isPassConfirmed","userPass","confirmPass","resetRegForm","registerUser","evt","preventDefault","alert","newUser","response","fetch","method","body","JSON","stringify","headers","status","children","onSubmit","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","id","type","name","placeholder","value","onChange","target","required","onClick","_c","$RefreshReg$"],"sources":["C:/Users/wangj/Desktop/job_tracker_homepage_update/job_tracker_ui/src/pages/RegisterPage.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nexport const RegisterPage = ( ) => {\r\n    const [email, setEmail] = useState('');\r\n    const [pword, setPword] = useState('');\r\n    const [pwordConfirm, setPwordConfirm] = useState('');\r\n    const [firstName, setFirstName] = useState('');\r\n    const [lastName, setLastName] = useState('');\r\n\r\n    const navigate = useNavigate();\r\n\r\n    const isPassConfirmed = (userPass, confirmPass) => {\r\n        return (userPass === confirmPass);\r\n    }\r\n\r\n    const resetRegForm = () => {\r\n        setEmail('');\r\n        setPword('');\r\n        setPwordConfirm('');\r\n        setFirstName('');\r\n        setLastName('');\r\n    }\r\n\r\n    const registerUser = async (evt) => {\r\n        evt.preventDefault();\r\n        if (!isPassConfirmed(pword, pwordConfirm)) {\r\n            alert(\"Passwords don't match. Try again.\");\r\n            resetRegForm();\r\n        } else {\r\n            const newUser = {email, pword, pwordConfirm, firstName, lastName};\r\n            const response = await fetch('/register', {\r\n                method: 'POST',\r\n                body: JSON.stringify(newUser),\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n            });\r\n            if (response.status === 201) {\r\n                alert(\"Registration successful\");\r\n                navigate('/jobs');\r\n            } else if (response.status === 400) {\r\n                alert(\"One or more of the fields were invalid or an account with that email already exists\");\r\n                resetRegForm();\r\n            } else {\r\n                alert(\"Error encountered during registration. Try again.\");\r\n                resetRegForm();\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <form onSubmit={registerUser}>\r\n                <label htmlFor=\"userFirstName\">\r\n                    First Name *\r\n                </label>\r\n                <input\r\n                    id=\"userFirstName\"\r\n                    type=\"text\"\r\n                    name=\"lastName\"\r\n                    placeholder=\"First name\"\r\n                    value={firstName}\r\n                    onChange={evt => setFirstName(evt.target.value)}\r\n                    required\r\n                />\r\n                <label htmlFor=\"userLastName\">\r\n                    Last Name *\r\n                </label>\r\n\r\n                <input\r\n                    id=\"userLastName\"\r\n                    type=\"text\"\r\n                    name=\"firstName\"\r\n                    placeholder=\"Last Name\"\r\n                    value={lastName}\r\n                    onChange={evt => setLastName(evt.target.value)}\r\n                    required\r\n                />\r\n                <label htmlFor=\"userEmail\">\r\n                    Email *\r\n                </label>\r\n                <input\r\n                    id=\"userEmail\"\r\n                    type=\"email\"\r\n                    name=\"email\"\r\n                    placeholder=\"Email\"\r\n                    value={email}\r\n                    onChange={evt => setEmail(evt.target.value)}\r\n                    required\r\n                />\r\n                <label htmlFor=\"userPassword\">\r\n                    Password * <br />\r\n                    (Must be at least 8 characters long and contain at least 1 of the following:\r\n                    uppercase letter, lowercase letter, number, special character)\r\n                </label>\r\n                <input\r\n                    id=\"userPassword\"\r\n                    type=\"password\"\r\n                    name=\"password\"\r\n                    placeholder=\"Password\"\r\n                    value={pword}\r\n                    onChange={evt => setPword(evt.target.value)}\r\n                    required\r\n                />\r\n                <label htmlFor=\"passConfirm\">\r\n                    Verify Password *\r\n                </label>\r\n                <input\r\n                    id=\"passConfirm\"\r\n                    type=\"password\"\r\n                    name=\"confirmation\"\r\n                    placeholder=\"Retype password\"\r\n                    value={pwordConfirm}\r\n                    onChange={evt => setPwordConfirm(evt.target.value)}\r\n                    required\r\n                />\r\n                <button\r\n                    id=\"regSubmit\"\r\n                    type=\"submit\"\r\n                    onClick={registerUser}\r\n                >\r\n                    Register\r\n                </button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RegisterPage;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}